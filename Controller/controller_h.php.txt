<?php

namespace Segment\Controller;

interface Permeator
{
    public function permeate();
}

interface Controller
{
    // Receive security verified input

    // Respond to NON_MODEL call
    /* Response may deviate from zone to zone
     *  zone class name w/ "NonSecure" at end
     */
    
    // Process Input REST
    
    // Determine how many, and what type, model calls
    /* High level logic, meta-wrapper around input handling and worker instances
     *  and instantiation calls
     * Check database for names of classes of ModelCaller
     */
    /**
     * @param NULL
     * @return (Object|FALSE) success returns Object, else FALSE
     */
    public function execute();
    
    /**
     * @param NULL
     * @return string returns string enumeration of an ID
     */
    public function getId();
    
    /**
     * Get DbDescription object for columns of one or all tables in source database.
     * @param string $table Optional. Name of desired DB table description
     * @return DbDescription
     */
    public function getDescription($table = FALSE);
    
    /**
     * @return array<Record>
     */
    public function getRecords();
    
    /**
     * @param (string|integer) $index
     * @throws InvalidArgumentException
     */
    public function unsetRecord($index);
    
    /**
     * @param Rest $rest
     */
    public function setRest(\Segment\utilities\Rest $rest);
    
    /**
     * @return Rest
     */
    public function getRest();
    
    /**
     * @return User
     */
    public function getUser();

    /**
     * @return ViewClass
     */
    public function getViewClass();
    
    /**
     * @return boolean
     */
    public function isAuthorizationNeeded();
    
    // Call Model
    
    //Package data returned from Model
    
    // Return Package
}


abstract class ControllerRestReceipt implements Controller
{
    use \Segment\utilities\FunctionSetter;
    
    private $ready = FALSE;
    /**
     * to be filled with Controller wrapper
     */
    protected $wrapper;
    /**
     * @return \Segment\utilities\RestRequest
     * @var Controller $this
     */
    abstract public  function getModelCallArgs();
    
    /**
     * @param \Callable $model_call name of ModelCallOrchestrator class
     * @param RestRequest $args
     * @return ModelCallOrchestrator
     * @var Controller $this
     */
    abstract public function instantiateModelCall();
    
    /**
     * @return ArrayAccess<string> queue of ModelCallOrchestrator string names
     * @var Controller $this
     */
    abstract public function getModelCallNames();
    
    /**
     * @param \Segment\Controller\ModelCallOrchestrator $call
     * @var Controller $this
     */
    abstract public function callModel(ModelCallOrchestrator $call);
    
    abstract public function __construct();
    
    public function getId()
    {
        return $this->wrapper->getId();
    }

    public function setRecord($index, \Segment\Model\production\Record $record)
    {
        $this->wrapper->setRecord($index, $record);
    }
    
    /**
     * Defines parent Controller for this instance to which methods will call upon.
     * @param \Segment\Controller\Controller $wrapper
     * @return boolean
     */
    public function setWrapper(Controller $wrapper)
    {
        $answer = FALSE;
        if(!$this->ready&&is_a($wrapper, 'Controller')){
            $this->wrapper = $wrapper;
            $answer = TRUE;
        }
        return $answer;
    }
}


abstract class ControllerRecordReceipt implements Controller
{
    use \Segment\utilities\FunctionSetter;
    /**
     * to be filled with Controller wrapper
     */
    protected $wrapper;
    
    /**
     * sets wrapper Records collection
     * @param \Segment\utilities\Record $model_tables Variable-length variable.
     * @var Controller $this
     */
    abstract public function organizeRecords(\Segment\utilities\Record ...$model_tables);
    
    /**
     * @var Controller $this
     * @returns \Segment\View\Segment
     */
    abstract public function getSegmentType();
    
    /**
     * @param \Segment\View\Segment $segment
     * @returns \Segment\View\Segment
     * @var Controller $this
     */
    abstract public function initializeSegment(\Segment\View\Segment $segment);
    
    abstract public function __construct();
    
    public function getId()
    {
        return $this->wrapper->getId();
    }

    public function getRecords()
    {
        return $this->wrapper->getRecords();
    }
    
    /**
     * Sets the parent Controller object for this instance upon which methods will call.
     * @param \Segment\Controller\Controller $wrapper
     * @return boolean
     */
    public function setWrapper(Controller $wrapper)
    {
        $answer = FALSE;
        if(!$this->ready&&is_a($wrapper, 'Controller')){
            $this->wrapper = $wrapper;
            $answer = TRUE;
        }
        return $answer;
    }
}


interface SearchModelCaller
{
    /**
     * 
     * @param RestSearch $search
     * @param RestSearch $other_searches variable length
     */
    public function __construct(RestSearch $search, RestSearch ...$other_searches);
}

interface FieldModelCaller
{
    public function __construct(RestSearch $search);
}

interface WildModelCaller
{
    /**
     * 
     * @param string $value
     */
    public function __construct($value);
}

interface ModelCallOrchestrator
{
    /**
     * Calls DAO as needed for business logic and returns resulting rows in array of Record objs.
     * @return array<\Segment\utilities\Record> Those rows returned from DB query
     */
    public function execute();
}

